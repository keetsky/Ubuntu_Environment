[web](http://www.jianshu.com/p/bcbe916f97e1)


**常州用命令** 尽量避免大写操作，容易与小写混乱
    *命令模式
        Ese:进入命令模式
	h 或 向左箭头键(←):光标向左移动一个字符
	j 或 向下箭头键(↓):光标向下移动一个字符
	k 或 向上箭头键(↑):光标向上移动一个字符
	l 或 向右箭头键(→):光标向右移动一个字符
        H                将光标移到屏幕上的起始行（或最上行）；
	M                将光标移到屏幕中间；
	L                将光标移到屏幕最后一行。
	K                显示光标后一个函数原型
	[Ctrl] + [f]	屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)
	[Ctrl] + [b]	屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)
	0或[Home]或^	这是数字『 0 』：移动到这一行的最前面字符处 (常用)
	$或[End]		移动到这一行的最后面字符处(常用)
	gg		移动到这个档案的第一行，相当于 1G 啊！ (常用)
	G          将光标定位到文件最后一行起始位置；
	n<Enter>	n 为数字。光标向下移动 n 行(常用)
	:行号		移到对应行号的行

	:/word		向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)
	:n1,n2s/word1/word2/g	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！
	:1,$s/word1/word2/g	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)
	:1,$s/word1/word2/gc	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)
        用*取代上面的搜索可能好些

	x, X		在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
	dd		删除游标所在的那一整行(常用)
	ndd		n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)
	d:行号d		删除光标所在行及对应行号之间，包括对应行号的所有行，共多行
	yy		复制游标所在的那一行(常用)
	nyy		n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)
	y:行号		复制渔村当前行到对应行号之间包括对应行号行，共多行
	p, P		p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)
	u		复原前一个动作。(常用)
	[Ctrl]+r	重做上一个动作。(常用)
	.		不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)


	:w		将编辑的数据写入硬盘档案中(常用)
	:q		离开 vi (常用)
	:q!		若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
			注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～
	:wq		储存后离开，若为 :wq! 则为强制储存后离开 (常用)



	：split    新建一个窗口，将当前窗口分割成两半，他们显示的是相同缓冲区的内容（同一个文件）。这样就可以在两个窗口中浏览相同的文件了。
	：vsplit   创建全新的垂直分割的窗口，同样是显示和当前窗口同一个文件内容。:q来关闭当前窗口
	：split  otherfile   新建窗口编辑或浏览另一个文件
         ctr+w     不同窗口间切换

    *编辑模式
	i ：在光标当前位置前进入
	a：在光标当前位置后进入        




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
**命令**
    *命令模式
        Ese:进入命令模式
	h 或 向左箭头键(←):光标向左移动一个字符
	j 或 向下箭头键(↓):光标向下移动一个字符
	k 或 向上箭头键(↑):光标向上移动一个字符
	l 或 向右箭头键(→):光标向右移动一个字符
	w	跳到下一个词的词首
	e	跳到当前词的词尾
	b	跳到当前词的词首，如果光标本身就在当前词的词首，则跳到前一词的词首
	*          当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；
	#          当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；
	(/)        移动到 前/后 句 的开始；
	{/}        跳转到 当前/下一个 段落 的开始。
	g_         到本行最后一个不是 blank 字符的位置。
	fa         到下一个为 a 的字符处，你也可以fs到下一个为s的字符。
	t,         到逗号前的第一个字符。逗号可以变成其它字符。
	3fa        在当前行查找第三个出现的 a。
	F/T        和 f 和 t 一样，只不过是相反方向;
	gg         将光标定位到文件第一行起始位置；
	G          将光标定位到文件最后一行起始位置；
	NG或Ngg    将光标定位到第 N 行的起始位置。
        H                将光标移到屏幕上的起始行（或最上行）；
	M                将光标移到屏幕中间；
	L                将光标移到屏幕最后一行。
	K                显示光标后一个函数原型



	shfit + ^	跳到行首（非空白字符）
	shift + $	跳到行尾
	f字符		跳到下一个相同字符的位置。之后按;可以继续跳向下一个相同字符的位置
	shift + f字符	跳到上一个相同字符的位置。同上，之后按;可以继续跳向下一个相同字符的位置，只是方向和上面是相反的。
	[Ctrl] + [f]	屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)
	[Ctrl] + [b]	屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)
	[Ctrl] + [d]	屏幕『向下』移动半页
	[Ctrl] + [u]	屏幕『向上』移动半页
	+	        光标移动到非空格符的下一行
	-	        光标移动到非空格符的上一行
	n<space>	按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
	0/[Home]	这是数字『 0 』：移动到这一行的最前面字符处 (常用)
	$ /[End]	移动到这一行的最后面字符处(常用)
	H        	光标移动到这个屏幕的最上方那一行的第一个字符
	M	        光标移动到这个屏幕的中央那一行的第一个字符
	L		光标移动到这个屏幕的最下方那一行的第一个字符
	G		移动到这个档案的最后一行(常用)
        shift + g	移到文档最后一行
	nG		n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)
	gg		移动到这个档案的第一行，相当于 1G 啊！ (常用)
	n<Enter>	n 为数字。光标向下移动 n 行(常用)
	:行号		移到对应行号的行

	/word		向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)
	?word		向光标之上寻找一个字符串名称为 word 的字符串
	n		这个 n 是英文按键。代表重复前一个搜寻的动作
	N		这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。
	:n1,n2s/word1/word2/g	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！
	:1,$s/word1/word2/g	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)
	:1,$s/word1/word2/gc	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)


	x, X		在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
	nx		n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。
	dd		删除游标所在的那一整行(常用)
	ndd		n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)
	d:行号d		删除光标所在行及对应行号之间，包括对应行号的所有行，共多行
	d1G		删除光标所在到第一行的所有数据
	dG		删除光标所在到最后一行的所有数据
	d$		删除游标所在处，到该行的最后一个字符
	d0		那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
	yy		复制游标所在的那一行(常用)
	nyy		n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)
	y:行号		复制渔村当前行到对应行号之间包括对应行号行，共多行
	y1G		复制游标所在行到第一行的所有数据
	yG		复制游标所在行到最后一行的所有数据
	y0		复制光标所在的那个字符到该行行首的所有数据
	y$		复制光标所在的那个字符到该行行尾的所有数据
	p, P		p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)
	J		将光标所在行与下一行的数据结合成同一行
	c		重复删除多个数据，例如向下删除 10 行，[ 10cj ]
	u		复原前一个动作。(常用)
	[Ctrl]+r	重做上一个动作。(常用)
	这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
	.		不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)

	:w		将编辑的数据写入硬盘档案中(常用)
	:w!		若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！
	:q		离开 vi (常用)
	:q!		若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
			注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～
	:wq		储存后离开，若为 :wq! 则为强制储存后离开 (常用)
	ZZ		这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！
	:w [filename]	将编辑的数据储存成另一个档案（类似另存新档）
	:r [filename]	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面
	:n1,n2 w [filename]	将 n1 到 n2 的内容储存成 filename 这个档案。
	:! command	暂时离开 vi 到指令行模式下执行 command 的显示结果！例如
	『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息


	shift + g：移到文档最后一行
	shift + h：移到当前屏的第一行
	shift + m：移到当前屏的中间行
	shift + l：移到当前屏的尾行

    *编辑模式
	i ：在光标当前位置前进入
	a：在光标当前位置后进入
	shift + i：在行首位置进入
	shfit + a：在行尾位置进入
	o：在光标所在行下方新开一行进入
	shift + o：在光标所在行上方新开一行进入
